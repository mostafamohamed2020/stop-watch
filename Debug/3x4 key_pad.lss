
3x4 key_pad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000020e  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000076  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000308  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d3  00000000  00000000  00000d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043f  00000000  00000000  00000efd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  0000133c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001e4  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000065  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000085  00000000  00000000  000015f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  74:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
#define no_of_overflows 1810/*number of overflows needed for counting one minute*/
u_int16 ticks ; /*global variable acts like counter of overflows*/

/*function happens when timer0 overflows*/
ISR(TIMER0_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	
	
	ticks++;
  8c:	80 91 60 00 	lds	r24, 0x0060
  90:	90 91 61 00 	lds	r25, 0x0061
  94:	01 96       	adiw	r24, 0x01	; 1
  96:	90 93 61 00 	sts	0x0061, r25
  9a:	80 93 60 00 	sts	0x0060, r24
	if(ticks == no_of_overflows)
  9e:	27 e0       	ldi	r18, 0x07	; 7
  a0:	82 31       	cpi	r24, 0x12	; 18
  a2:	92 07       	cpc	r25, r18
  a4:	51 f4       	brne	.+20     	; 0xba <__vector_9+0x3e>
	{
	if(PORTC > 0)
  a6:	85 b3       	in	r24, 0x15	; 21
  a8:	88 23       	and	r24, r24
  aa:	39 f0       	breq	.+14     	; 0xba <__vector_9+0x3e>
	{
		PORTC--;   /*decrement by one every minute*/
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	81 50       	subi	r24, 0x01	; 1
  b0:	85 bb       	out	0x15, r24	; 21
	    ticks =0; /*clear ticks to recounts*/
  b2:	10 92 61 00 	sts	0x0061, r1
  b6:	10 92 60 00 	sts	0x0060, r1
	}	
	}	
}
  ba:	9f 91       	pop	r25
  bc:	8f 91       	pop	r24
  be:	2f 91       	pop	r18
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <TMR0_initit>:
 * initial value -> zero
 */
void TMR0_initit(void)
{
	
	TCNT0 = 0;                                     /*initial value*/
  ca:	12 be       	out	0x32, r1	; 50
	TIMSK = (1<<TOIE0);                            /*enabling interrupt for timer0*/
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= ((1<<FOC0) | (1<<CS02) | (1<<CS00)); /*normal mode with 1042 prescaller*/
  d0:	83 b7       	in	r24, 0x33	; 51
  d2:	85 68       	ori	r24, 0x85	; 133
  d4:	83 bf       	out	0x33, r24	; 51
	
}
  d6:	08 95       	ret

000000d8 <main>:
int main(void)
{
	
	          
	u_int8 num ;               /*variable to hold the pressed number*/
	sei();                    /*enable global interrupts*/
  d8:	78 94       	sei
	DDRC = 0x0f;             /*first four bits of port c as output pins for the 7-segment*/
  da:	8f e0       	ldi	r24, 0x0F	; 15
  dc:	84 bb       	out	0x14, r24	; 20
	//PORTC = 0;              /*the initial value of 7-segment is zero*/
	DDRB |= (1<<PB0);      /*alarm*/
  de:	b8 9a       	sbi	0x17, 0	; 23
	PORTB &= (~(1<<PB0)); /*alarm is off*/
  e0:	c0 98       	cbi	0x18, 0	; 24
	DDRB |= (1<<PB1);    /*red led*/
  e2:	b9 9a       	sbi	0x17, 1	; 23
    PORTB &= (~(1<<PB1));/*led is off*/
  e4:	c1 98       	cbi	0x18, 1	; 24
	
	 
    while(1)
    {
		
        num = pressed_key1();
  e6:	0e 94 98 00 	call	0x130	; 0x130 <pressed_key1>
			if((num >= 0) && (num <= 9))
  ea:	8a 30       	cpi	r24, 0x0A	; 10
  ec:	08 f4       	brcc	.+2      	; 0xf0 <main+0x18>
		{
			PORTC = num; /*display the pressed num*/
  ee:	85 bb       	out	0x15, r24	; 21
		}
		TMR0_initit();
  f0:	0e 94 65 00 	call	0xca	; 0xca <TMR0_initit>
		while(PORTC != 0);
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	88 23       	and	r24, r24
  f8:	e9 f7       	brne	.-6      	; 0xf4 <main+0x1c>
		{
				 
		PORTB |= (1<<PB0);  /*buzzer*/ 
  fa:	c0 9a       	sbi	0x18, 0	; 24
		PORTB |= (1<<PB1); /*red led*/
  fc:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	8f e3       	ldi	r24, 0x3F	; 63
 100:	92 e4       	ldi	r25, 0x42	; 66
 102:	af e0       	ldi	r26, 0x0F	; 15
 104:	81 50       	subi	r24, 0x01	; 1
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	a0 40       	sbci	r26, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x2c>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x36>
 10e:	00 00       	nop
		_delay_ms(5000);
		PORTB &= (~(1<<PB0)); 
 110:	c0 98       	cbi	0x18, 0	; 24
		PORTB &= (~(1<<PB1));
 112:	c1 98       	cbi	0x18, 1	; 24
 114:	8f e3       	ldi	r24, 0x3F	; 63
 116:	92 e4       	ldi	r25, 0x42	; 66
 118:	af e0       	ldi	r26, 0x0F	; 15
 11a:	81 50       	subi	r24, 0x01	; 1
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	a0 40       	sbci	r26, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x42>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x4c>
 124:	00 00       	nop
 126:	df cf       	rjmp	.-66     	; 0xe6 <main+0xe>

00000128 <adjust_num>:
 128:	8b 30       	cpi	r24, 0x0B	; 11
 12a:	09 f4       	brne	.+2      	; 0x12e <adjust_num+0x6>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <pressed_key1>:
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	60 e1       	ldi	r22, 0x10	; 16
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	e0 e0       	ldi	r30, 0x00	; 0
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	a0 e0       	ldi	r26, 0x00	; 0
 13c:	9b 01       	movw	r18, r22
 13e:	08 2e       	mov	r0, r24
 140:	02 c0       	rjmp	.+4      	; 0x146 <pressed_key1+0x16>
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <pressed_key1+0x12>
 14a:	2a bb       	out	0x1a, r18	; 26
 14c:	20 95       	com	r18
 14e:	2b bb       	out	0x1b, r18	; 27
 150:	c8 9b       	sbis	0x19, 0	; 25
 152:	10 c0       	rjmp	.+32     	; 0x174 <pressed_key1+0x44>
 154:	9f 01       	movw	r18, r30
 156:	92 2f       	mov	r25, r18
 158:	9f 5f       	subi	r25, 0xFF	; 255
 15a:	49 b3       	in	r20, 0x19	; 25
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	02 2e       	mov	r0, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <pressed_key1+0x3a>
 166:	55 95       	asr	r21
 168:	47 95       	ror	r20
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <pressed_key1+0x36>
 16e:	40 fd       	sbrc	r20, 0
 170:	0a c0       	rjmp	.+20     	; 0x186 <pressed_key1+0x56>
 172:	01 c0       	rjmp	.+2      	; 0x176 <pressed_key1+0x46>
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	8f 5f       	subi	r24, 0xFF	; 255
 178:	29 2f       	mov	r18, r25
 17a:	22 0f       	add	r18, r18
 17c:	92 0f       	add	r25, r18
 17e:	89 0f       	add	r24, r25
 180:	0e 94 94 00 	call	0x128	; 0x128 <adjust_num>
 184:	08 95       	ret
 186:	23 30       	cpi	r18, 0x03	; 3
 188:	31 05       	cpc	r19, r1
 18a:	29 f7       	brne	.-54     	; 0x156 <pressed_key1+0x26>
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	83 30       	cpi	r24, 0x03	; 3
 190:	a8 f2       	brcs	.-86     	; 0x13c <pressed_key1+0xc>
 192:	8a 2f       	mov	r24, r26
 194:	d3 cf       	rjmp	.-90     	; 0x13c <pressed_key1+0xc>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
